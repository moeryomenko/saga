version: '3.9'

services:
  postgres:
    container_name: postgres
    image: "postgres:14-alpine"
    environment:
      POSTGRES_MULTIPLE_DATABASES: "${PG_DBS}"
      POSTGRES_USER: "${PG_USER}"
      POSTGRES_PASSWORD: "${PG_PASS}"
    ports:
      - 5432:5432
    networks:
      - local
    volumes:
      - type: bind
        source: ./docker-entrypoint-initdb.d
        target: /docker-entrypoint-initdb.d
        read_only: true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  order_migrations:
    container_name: order_migrations
    image: migrate/migrate
    volumes:
      - ../migrations/order:/migrations
    command:
      [ "-path", "/migrations", "-database", "postgres://${PG_USER}:${PG_PASS}@postgres:5432/orders?sslmode=disable", "up" ]
    networks:
      - local
    depends_on:
      postgres:
        condition: service_healthy

  payment_migrations:
    container_name: payment_migrations
    image: migrate/migrate
    volumes:
      - ../migrations/payment:/migrations
    command:
      [ "-path", "/migrations", "-database", "postgres://${PG_USER}:${PG_PASS}@postgres:5432/payments?sslmode=disable", "up" ]
    networks:
      - local
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    container_name: redis
    image: redis:6-alpine
    networks:
      - local
    ports:
      - 6379:6379
    healthcheck:
      # based on: https://stackoverflow.com/a/70706628/7821330
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3


networks:
  local:
    name: local
